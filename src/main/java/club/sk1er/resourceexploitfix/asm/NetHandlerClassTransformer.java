package club.sk1er.resourceexploitfix.asm;

import club.sk1er.resourceexploitfix.ResourceExploitFix;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.launchwrapper.IClassTransformer;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S48PacketResourcePackSend;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.EnumChatFormatting;
import net.minecraftforge.fml.common.asm.transformers.deobf.FMLDeobfuscatingRemapper;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.tree.*;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.List;

import static org.objectweb.asm.Opcodes.*;

@SuppressWarnings("ALL")
public class NetHandlerClassTransformer implements IClassTransformer {

    @Override
    public byte[] transform(String name, String transformedName, byte[] basicClass) {
            if(transformedName.equals("net.minecraft.network.play.server.S48PacketResourcePackSend")) {
                ResourceExploitFix.LOGGER.info("Injecting into S48PacketResourcePack...");
                ClassReader classReader = new ClassReader(basicClass);
                ClassNode classNode = new ClassNode();
                classReader.accept(classNode, 0);

                MethodNode methodNode = ((List<MethodNode>)classNode.methods).stream()
                        .filter(it -> {
                            String mappedMethodName = FMLDeobfuscatingRemapper.INSTANCE.mapMethodName(classNode.name, it.name, it.desc);
                            return it.name.equals("processPacket") || it.name.equals("func_148833_a");
                        })
                        .findFirst()
                        .orElse(null);

                /**
                 *  public void processPacket(INetHandlerPlayClient handler)
                 *  {
                 *      -- START INJECTION --
                 *      if(club.sk1er.resourceexploitfix.asm.NetHandlerClassTransformer.isValidUrlPack(this)) {
                 *          return;
                 *      }
                 *      -- END INJECTION --
                 *      handler.handleEntityMovement(this);
                 *  }
                 */

                if(methodNode != null) {
                    ResourceExploitFix.LOGGER.info("Injecting into processPacket.");
                    InsnList insnList = new InsnList();
                    insnList.add(new VarInsnNode(ALOAD, 0));
                    insnList.add(new MethodInsnNode(INVOKESTATIC, "club/sk1er/resourceexploitfix/asm/NetHandlerClassTransformer", "isValidPackUrl", "(Lnet/minecraft/network/play/server/S48PacketResourcePackSend;)Z"));
                    LabelNode label = new LabelNode();
                    insnList.add(new JumpInsnNode(IFEQ, label));
                    insnList.add(new InsnNode(RETURN));

                    insnList.add(label);

                    methodNode.instructions.insertBefore(methodNode.instructions.getFirst(), insnList);
                }

                ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
                classNode.accept(classWriter);

                return classWriter.toByteArray();
            }

        return basicClass;
    }



    public static boolean isValidPackUrl(S48PacketResourcePackSend packet) {
        return !validateResourcePackUrl(packet.getURL(), packet.getHash());
    }

    private static boolean validateResourcePackUrl(String url, String hash) {
        try {
            URI uri = new URI(url);
            String scheme = uri.getScheme();
            boolean isLevelProtocol = "level".equals(scheme);

            if (!"http".equals(scheme) && !"https".equals(scheme) && !isLevelProtocol) {
                Minecraft.getMinecraft().getNetHandler().getNetworkManager().sendPacket(new C19PacketResourcePackStatus(hash, C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                throw new URISyntaxException(url, "Wrong protocol");
            }
            url = URLDecoder.decode(url.substring("level://".length()), StandardCharsets.UTF_8.toString());

            if (isLevelProtocol && (url.contains("..") || !url.endsWith("/resources.zip"))) {
                System.out.println("Malicious server tried to access " + url);
                EntityPlayerSP thePlayer = Minecraft.getMinecraft().thePlayer;
                if (thePlayer != null) {
                    thePlayer.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + EnumChatFormatting.BOLD.toString() + "[WARNING] The current server has attempted to be malicious but we have stopped them."));
                }
                throw new URISyntaxException(url, "Invalid levelstorage resourcepack path");
            }

            return true;
        } catch (URISyntaxException e) {
            return false;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return false;
    }
}
